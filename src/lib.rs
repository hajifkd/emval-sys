/* automatically generated by rust-bindgen */

pub type TYPEID = *const ::std::os::raw::c_void;

extern "C" {
    pub fn _emval_register_symbol(arg1: *const ::std::os::raw::c_char);
}

#[allow(non_camel_case_types)]
pub type EM_VAL = *mut ::std::os::raw::c_void;
#[allow(non_camel_case_types)]
pub type EM_DESTRUCTORS = *mut ::std::os::raw::c_void;
#[allow(non_camel_case_types)]
pub type EM_METHOD_CALLER = *mut ::std::os::raw::c_void;
#[allow(non_camel_case_types)]
pub type EM_GENERIC_WIRE_TYPE = f64;
#[allow(non_camel_case_types)]
pub type EM_VAR_ARGS = *const ::std::os::raw::c_void;

pub type GenericFunction = *const ::std::os::raw::c_void;

pub const _EMVAL_UNDEFINED: EM_VAL = 1 as _;
pub const _EMVAL_NULL: EM_VAL = 2 as _;
pub const _EMVAL_TRUE: EM_VAL = 3 as _;
pub const _EMVAL_FALSE: EM_VAL = 4 as _;

extern "C" {
    pub fn _emval_incref(value: EM_VAL);
}
extern "C" {
    pub fn _emval_decref(value: EM_VAL);
}
extern "C" {
    pub fn _emval_run_destructors(handle: EM_DESTRUCTORS);
}
extern "C" {
    pub fn _emval_new_array() -> EM_VAL;
}
extern "C" {
    pub fn _emval_new_object() -> EM_VAL;
}
extern "C" {
    pub fn _emval_new_cstring(arg1: *const ::std::os::raw::c_char) -> EM_VAL;
}
extern "C" {
    pub fn _emval_take_value(type_: TYPEID, argv: EM_VAR_ARGS) -> EM_VAL;
}
extern "C" {
    pub fn _emval_new(value: EM_VAL, argCount: ::std::os::raw::c_uint,
                      argTypes: *const TYPEID, argv: EM_VAR_ARGS) -> EM_VAL;
}
extern "C" {
    pub fn _emval_get_global(name: *const ::std::os::raw::c_char) -> EM_VAL;
}
extern "C" {
    pub fn _emval_get_module_property(name: *const ::std::os::raw::c_char)
     -> EM_VAL;
}
extern "C" {
    pub fn _emval_get_property(object: EM_VAL, key: EM_VAL) -> EM_VAL;
}
extern "C" {
    pub fn _emval_set_property(object: EM_VAL, key: EM_VAL, value: EM_VAL);
}
extern "C" {
    pub fn _emval_as(value: EM_VAL, returnType: TYPEID,
                     destructors: *mut EM_DESTRUCTORS)
     -> EM_GENERIC_WIRE_TYPE;
}
extern "C" {
    pub fn _emval_equals(first: EM_VAL, second: EM_VAL) -> bool;
}
extern "C" {
    pub fn _emval_strictly_equals(first: EM_VAL, second: EM_VAL) -> bool;
}
extern "C" {
    pub fn _emval_call(value: EM_VAL, argCount: ::std::os::raw::c_uint,
                       argTypes: *const TYPEID, argv: EM_VAR_ARGS) -> EM_VAL;
}
extern "C" {
    pub fn _emval_get_method_caller(argCount: ::std::os::raw::c_uint,
                                    argTypes: *const TYPEID)
     -> EM_METHOD_CALLER;
}
extern "C" {
    pub fn _emval_call_method(caller: EM_METHOD_CALLER, handle: EM_VAL,
                              methodName: *const ::std::os::raw::c_char,
                              destructors: *mut EM_DESTRUCTORS,
                              argv: EM_VAR_ARGS) -> EM_GENERIC_WIRE_TYPE;
}
extern "C" {
    pub fn _emval_call_void_method(caller: EM_METHOD_CALLER, handle: EM_VAL,
                                   methodName: *const ::std::os::raw::c_char,
                                   argv: EM_VAR_ARGS);
}
extern "C" {
    pub fn _emval_typeof(value: EM_VAL) -> EM_VAL;
}

extern "C" {
    pub fn _embind_register_void(voidType: TYPEID,
                                 name: *const ::std::os::raw::c_char);
}
extern "C" {
    pub fn _embind_register_bool(boolType: TYPEID,
                                 name: *const ::std::os::raw::c_char,
                                 size: usize, trueValue: bool,
                                 falseValue: bool);
}
extern "C" {
    pub fn _embind_register_integer(integerType: TYPEID,
                                    name: *const ::std::os::raw::c_char,
                                    size: usize,
                                    minRange: ::std::os::raw::c_long,
                                    maxRange: ::std::os::raw::c_ulong);
}
extern "C" {
    pub fn _embind_register_float(floatType: TYPEID,
                                  name: *const ::std::os::raw::c_char,
                                  size: usize);
}
extern "C" {
    pub fn _embind_register_std_string(stringType: TYPEID,
                                       name: *const ::std::os::raw::c_char);
}
extern "C" {
    pub fn _embind_register_std_wstring(stringType: TYPEID, charSize: usize,
                                        name: *const ::std::os::raw::c_char);
}
extern "C" {
    pub fn _embind_register_emval(emvalType: TYPEID,
                                  name: *const ::std::os::raw::c_char);
}

extern "C" {
    pub fn _embind_register_function(name: *const ::std::os::raw::c_char,
                                     argCount: ::std::os::raw::c_uint,
                                     argTypes: *const TYPEID,
                                     signature: *const ::std::os::raw::c_char,
                                     invoker: GenericFunction,
                                     function: GenericFunction);
}
